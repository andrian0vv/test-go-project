// Code generated by MockGen. DO NOT EDIT.
// Source: orders.go
//
// Generated by this command:
//
//	mockgen -source orders.go -destination mocks/orders.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/andrian0vv/test-go-project/internal/models"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// Mockdatabase is a mock of database interface.
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase.
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance.
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// Tx mocks base method.
func (m *Mockdatabase) Tx(arg0 context.Context, arg1 func(context.Context, *sqlx.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockdatabaseMockRecorder) Tx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*Mockdatabase)(nil).Tx), arg0, arg1)
}

// MockordersRepository is a mock of ordersRepository interface.
type MockordersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockordersRepositoryMockRecorder
}

// MockordersRepositoryMockRecorder is the mock recorder for MockordersRepository.
type MockordersRepositoryMockRecorder struct {
	mock *MockordersRepository
}

// NewMockordersRepository creates a new mock instance.
func NewMockordersRepository(ctrl *gomock.Controller) *MockordersRepository {
	mock := &MockordersRepository{ctrl: ctrl}
	mock.recorder = &MockordersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersRepository) EXPECT() *MockordersRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockordersRepository) CreateOrder(arg0 context.Context, arg1 *sqlx.Tx, arg2 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockordersRepositoryMockRecorder) CreateOrder(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockordersRepository)(nil).CreateOrder), arg0, arg1, arg2)
}

// MockproductsRepository is a mock of productsRepository interface.
type MockproductsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproductsRepositoryMockRecorder
}

// MockproductsRepositoryMockRecorder is the mock recorder for MockproductsRepository.
type MockproductsRepositoryMockRecorder struct {
	mock *MockproductsRepository
}

// NewMockproductsRepository creates a new mock instance.
func NewMockproductsRepository(ctrl *gomock.Controller) *MockproductsRepository {
	mock := &MockproductsRepository{ctrl: ctrl}
	mock.recorder = &MockproductsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductsRepository) EXPECT() *MockproductsRepositoryMockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockproductsRepository) GetProducts(ctx context.Context, ids []int64) (map[int64]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, ids)
	ret0, _ := ret[0].(map[int64]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockproductsRepositoryMockRecorder) GetProducts(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockproductsRepository)(nil).GetProducts), ctx, ids)
}

// WriteOff mocks base method.
func (m *MockproductsRepository) WriteOff(ctx context.Context, tx *sqlx.Tx, products map[int64]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOff", ctx, tx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOff indicates an expected call of WriteOff.
func (mr *MockproductsRepositoryMockRecorder) WriteOff(ctx, tx, products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOff", reflect.TypeOf((*MockproductsRepository)(nil).WriteOff), ctx, tx, products)
}
